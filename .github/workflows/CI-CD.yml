name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  FLASK_APP: app.py
  TEST_REPORT: tests/test-results.xml
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/my-flask-ml-app:latest
  TF_VAR_cluster_name: flask-ml-cluster

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    # -----------------------
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install TensorFlow (CPU only)
      run: pip install tensorflow-cpu==2.13.0


    # -----------------------
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest selenium

    - name: Run Unit Tests (Pytest)
      if: false
      run: pytest tests/test_app.py --junitxml=$TEST_REPORT
      env:
         PYTHONPATH: ${{ github.workspace }}


    - name: Run UI Tests (Selenium)
      if: false
      run: pytest tests/test_selenium.py

     # -----------------------
    - name: SonarQube Scan
      uses: sonarsource/sonarcloud-github-action@v2
      with:
        projectBaseDir: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # -----------------------
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t $DOCKER_IMAGE .

    - name: Push Docker image
      run: docker push $DOCKER_IMAGE

    # -----------------------
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve

    # -----------------------
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: eu-north-1

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f deployment/deployment.yaml
        kubectl apply -f deployment/service.yaml

    # -----------------------
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: $TEST_REPORT

    - name: Notify on Success
      if: success() && env.SLACK_WEBHOOK != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"✅ Build Successful: '${{ github.repository }}' [${{ github.run_number }}]"}' \
        ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify on Failure
      if: failure() && env.SLACK_WEBHOOK != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"❌ Build Failed: '${{ github.repository }}' [${{ github.run_number }}]"}' \
        ${{ secrets.SLACK_WEBHOOK }}

